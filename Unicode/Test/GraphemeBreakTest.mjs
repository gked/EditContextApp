import getGraphemeBreakClassification from "../GraphemeBreak.js"

test(() => {
	assert_equals(getGraphemeBreakClassification(0xD), "CR")
	assert_equals(getGraphemeBreakClassification(0xC), "Control")
	assert_equals(getGraphemeBreakClassification(0xE), "Control")
	assert_equals(getGraphemeBreakClassification(0xA), "LF")
	assert_equals(getGraphemeBreakClassification(0x0D4E), "Prepend")
	assert_equals(getGraphemeBreakClassification(0x111C2), "Prepend")
	assert_equals(getGraphemeBreakClassification(0x111C3), "Prepend")
	assert_equals(getGraphemeBreakClassification(0x111C1), "Other")
	assert_equals(getGraphemeBreakClassification(0x100000), "Other")
	assert_equals(getGraphemeBreakClassification(0x0), "Control")
	assert_equals(getGraphemeBreakClassification(0x200D), "ZWJ")
	assert_equals(getGraphemeBreakClassification(0xC367), "LVT")
	assert_equals(getGraphemeBreakClassification(0xC50B), "LVT")
	assert_equals(getGraphemeBreakClassification(0xC50C), "LV")
	assert_equals(getGraphemeBreakClassification(0xC50D), "LVT")
	assert_equals(getGraphemeBreakClassification(0x115B1), "SpacingMark")
	assert_equals(getGraphemeBreakClassification(0x115B8), "SpacingMark")
	assert_equals(getGraphemeBreakClassification(0x1920), "Extend")
	assert_equals(getGraphemeBreakClassification(0x1DA36), "Extend")
	assert_equals(getGraphemeBreakClassification(0x1101), "L")
	assert_equals(getGraphemeBreakClassification(0x1161), "V")
	assert_equals(getGraphemeBreakClassification(0x11A9), "T")
}, "Grapheme Cluster Break Classification Test")